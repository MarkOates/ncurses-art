properties:


  - name: raw_csv
    type: std::string
    init_with: '""'
    constructor_arg: true
    getter: true

  - name: questions
    type: std::vector<Quizes::MultiplexQuestion>
    init_with: ''
    getter: explicit

  - name: loaded
    type: bool
    init_with: false
    getter: true


functions:


  - name: get_questions
    type: std::vector<Quizes::MultiplexQuestion>
    guards: [ loaded ]
    body: |
      return questions;
    

  - name: load
    type: bool
    guards: [ (!loaded) ]
    body: |
      const int EXPECTED_NUM_COLUMNS = 6;
      std::vector<std::string> lines = Blast::StringSplitter(raw_csv, '\n').split();
      bool discard_first_line = true;
      int line_num = 0;

      if (discard_first_line)
      {
         assert(!lines.empty());
         lines.front() = std::move(lines.back());
         lines.pop_back();
         line_num++;
      }

      for (auto &line : lines)
      {
         std::vector<std::string> columns = Blast::StringSplitter(line, '\t').split();
         if (columns.size() != EXPECTED_NUM_COLUMNS)
         {
            std::stringstream error_message;
            error_message << "There was not the expected number of columns ("
                          << EXPECTED_NUM_COLUMNS
                          << ") on line "
                          << line_num << ". Instead, there were "
                          << columns.size() << " columns.";
            throw std::runtime_error(error_message.str());
         }
         
         // name the columns
         std::string date = columns[0];
         std::string subject_event_or_document = columns[1];
         std::string subject_person_name_or_symbol = columns[2];
         std::string subject_group = columns[3];
         std::string relevance = columns[4];
         std::string reference_page = columns[5];

         // swizzle the subject columns
         std::string subject = extract_subject(
            subject_event_or_document, subject_person_name_or_symbol, subject_group, line_num);
         std::string subject_type = extract_subject_type(
            subject_event_or_document, subject_person_name_or_symbol, subject_group);

         // create teh quiz object
         Quizes::MultiplexQuestion question(date, subject, subject_type, relevance, reference_page);

         // add the question to the questions
         questions.push_back(question);

         line_num++;
      }
      loaded = true;
      return true;
    body_dependency_symbols:
      - Blast::StringSplitter
      - Quizes::MultiplexQuestion


  - name: extract_subject
    type: std::string
    parameters:
      - name: event_or_document
        type: std::string
        default_argument: '"[not-set]"'
      - name: person_name_or_symbol
        type: std::string
        default_argument: '"[not-set]"'
      - name: subject_group
        type: std::string
        default_argument: '"[not-set]"'
      - name: line_number
        type: int
        default_argument: 0
    body: |
      std::vector<std::string> inputs = { event_or_document, person_name_or_symbol, subject_group };
      for (int i=0; i<inputs.size(); i++)
      {
         if (inputs[i].empty())
         {
            inputs.erase(inputs.begin() + i);
            i--;
         }
      }
      if (inputs.size() != 1)
      {
         std::stringstream error_message;
         error_message << "Only one subject can be present, but none or several was present on line "
                       << line_number << ".";
         throw std::runtime_error(error_message.str());
      }
      return inputs[0];


  - name: extract_subject_type
    type: std::string
    parameters:
      - name: event_or_document
        type: std::string
        default_argument: '"[not-set]"'
      - name: person_name_or_symbol
        type: std::string
        default_argument: '"[not-set]"'
      - name: subject_group
        type: std::string
        default_argument: '"[not-set]"'
    body: |
      if (!event_or_document.empty()) return "event_or_document";
      if (!person_name_or_symbol.empty()) return "person_name_or_symbol";
      if (!subject_group.empty()) return "subject_group";
      throw std::runtime_error("unexpected extraction of extract_subject_type not valid for some reason.");
      return "[error-path]";


dependencies:


  - symbol: std::vector<Quizes::MultiplexQuestion>
    headers: [ vector, Quizes/MultiplexQuestion.hpp ]
  - symbol: Quizes::MultiplexQuestion
    headers: [ Quizes/MultiplexQuestion.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]


