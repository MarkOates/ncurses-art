properties:
  - name: command
    type: std::string
    init_with: "\"echo hello!\""
    constructor_arg: true
  - name: callback
    type: std::function<void(std::string)>
    init_with: "ShellCommandExecutorWithCallback::simple_cout_callback"
    constructor_arg: true
functions:
  - name: simple_silent_callback
    type: void
    static: true
    parameters:
      - name: string_for_appending
        type: std::string
        default_argument: "\"\""
    body: |
      return;
  - name: simple_cout_callback
    type: void
    static: true
    parameters:
      - name: string_for_appending
        type: std::string
        default_argument: "\"\""
    body: |
      std::cout << string_for_appending;
  - name: execute
    type: std::string
    body: |
      static const int BUFFER_SIZE = 128;

      std::array<char, BUFFER_SIZE> buffer;
      std::string result;
      std::shared_ptr<FILE> pipe(popen(command.c_str(), "r"), pclose);

      if (!pipe) throw std::runtime_error("ShellCommandExecutor::execute(): Error: popen() failed.");

      while (!feof(pipe.get()))
         if (fgets(buffer.data(), BUFFER_SIZE, pipe.get()) != nullptr)
         {
            result += buffer.data();
            callback(buffer.data());
         }

      return result;
function_body_symbol_dependencies:
  - std::cout
  - FILE
  - std::string
  - std::array
  - std::shared_ptr
  - pipe
  - popen
  - pclose
  - feof
  - fgets
  - std::runtime_error
dependencies:
  - symbol: std::function<void(std::string)>
    headers: [ 'functional', 'string' ]
  - symbol: void*
    headers: [ 'string' ]
  - symbol: FILE
    headers: [ 'cstdio' ]
  - symbol: std::string
    headers: [ 'string' ]
  - symbol: std::array
    headers: [ 'array' ]
  - symbol: std::shared_ptr
    headers: [ 'memory' ]
  - symbol: pipe
    headers: [ 'cstdio' ]
  - symbol: popen
    headers: [ 'cstdio' ]
  - symbol: pclose
    headers: [ 'cstdio' ]
  - symbol: feof
    headers: [ 'cstdio' ]
  - symbol: fgets
    headers: [ 'cstdio' ]
  - symbol: std::runtime_error
    headers: [ 'stdexcept' ]
