properties:
  - name: last_captured_output_from_status_request
    type: std::string
    getter: true
  - name: git_status_command
    type: std::string
    init_with: "\"git status -uno -u\""
    getter: true
  - name: git_pull_command
    type: std::string
    init_with: "\"git pull\""
    getter: true
  - name: git_branch_count_command
    type: std::string
    init_with: "\"git branch | wc -l\""
    getter: true
  - name: git_current_branch_command
    type: std::string
    init_with: "\"git branch | grep \\\\* | cut -d ' ' -f2\""
    getter: true
  - name: git_remote_branch_names_command
    type: std::string
    init_with: "\"git branch -r\""
    getter: true
  - name: component_quintessence_filenames_command
    type: std::string
    init_with: "\"find quintessence -name '*.q.yml'\""
    getter: true
  - name: repo_name
    getter: true
    init_with: "\"blast\""
    constructor_arg: true
  - name: repos_directory
    type: std::string
    getter: true
    init_with: "\"~/Repos\""
    constructor_arg: true
  - name: only_poll_once
    type: bool
    getter: true
    init_with: true
  - name: status_polled
    type: bool
    getter: true
    setter: true
    init_with: false
functions:
  - name: local_repo_exists
    type: bool
    body: |
      poll_status();
      // TODO: modify this function so it can rely on captured std::err output
      // std::string string_to_find = "cd: no such file or directory";
      return !get_last_captured_output_from_status_request().empty();

  - name: has_file_changes
    type: bool
    body:
      poll_status();
      std::string string_to_find = "Changes not staged for commit:";
      return last_captured_output_from_status_request_contains_string(string_to_find);

  - name: has_untracked_files
    type: bool
    body: |
      poll_status();
      std::string string_to_find = "Untracked files:";
      return last_captured_output_from_status_request_contains_string(string_to_find);

  - name: is_the_repo_in_sync_with_remote
    type: bool
    body: |
      poll_status();
      std::string string_to_find = "Your branch is up to date with 'origin/master'";
      return last_captured_output_from_status_request_contains_string(string_to_find);

  - name: is_the_local_repo_ahead
    type: bool
    body: |
      poll_status();
      std::string string_to_find = "Your branch is ahead of 'origin/master' by";
      return last_captured_output_from_status_request_contains_string(string_to_find);

  - name: is_the_local_repo_behind
    type: bool
    body: |
      poll_status();
      std::string string_to_find = "Your branch is behind 'origin/master' by";
      return last_captured_output_from_status_request_contains_string(string_to_find);

  - name: get_branch_count
    type: int
    body: |
      std::stringstream command;
      command << "(cd " << get_repos_directory() << "/" << get_repo_name() << " && git fetch && " << get_git_branch_count_command() << ")";
      std::string command_output = execute_command(command.str());
      int result = atoi(command_output.c_str());
      return result;

  - name: get_branch_names_at_remote
    type: std::vector<std::string>
    body: |
      std::stringstream command;
      command << "(cd " << get_repos_directory() << "/" << get_repo_name() << " && " << get_git_remote_branch_names_command() << ")";
      std::string command_output = execute_command(command.str());
      std::vector<std::string> lines = StringSplitter(command_output, '\n').split();
      for (auto &line : lines)
      {
         line = StringTrimmer(line).trim();
      }
      std::sort(lines.begin(), lines.end());
      return lines;
    body_dependency_symbols:
      - std::sort

  - name: is_current_branch_master
    type: bool
    body: |
      return get_current_branch_name() == "master\n";

  - name: get_current_branch_name_command
    type: std::string
    body: |
      std::stringstream command;
      command << "(cd " << get_repos_directory() << "/" << get_repo_name() << " && git fetch && " << get_git_current_branch_command() << ")";
      return command.str();

  - name: get_pull_command
    type: std::string
    body: |
      std::stringstream result;
      result << "(cd " << get_repos_directory() << "/" << get_repo_name() << " && git fetch && " << get_git_pull_command() << ")";
      return result.str();

  - name: get_status_command
    type: std::string
    body: |
      std::stringstream result;
      result << "(cd " << get_repos_directory() << "/" << get_repo_name() << " && git fetch && " << get_git_status_command() << ")";
      return result.str();

  - name: get_current_branch_name
    type: std::string
    body: |
      std::string current_branch_name_command = get_current_branch_name_command();
      return execute_command(current_branch_name_command);

  - name: get_quintessence_filenames
    type: std::vector<std::string>
    body: |
      std::stringstream command;
      command << "(cd " << get_repos_directory() << "/" << get_repo_name() << " && " << get_component_quintessence_filenames_command() << ")";
      std::string command_output = execute_command(command.str());
      return StringSplitter(command_output, '\n').split();

  - name: have_the_local_and_remote_repos_diverged
    type: bool
    body: |
      poll_status();
      std::string string_to_find = "Your branch and 'origin/master' have diverged";
      return last_captured_output_from_status_request_contains_string(string_to_find);

  - name: last_captured_output_from_status_request_contains_string
    type: bool
    parameters:
      - name: string_to_find
        type: std::string
        default_argument: ""
    body: |
      std::size_t found = last_captured_output_from_status_request.find(string_to_find);
      if (found!=std::string::npos) return true;
      return false;

  - name: poll_status
    type: bool
    body: |
      if (get_only_poll_once() && get_status_polled()) return true;
      last_captured_output_from_status_request = execute_command(get_status_command());
      set_status_polled(true);
      return true;

  - name: execute_command
    type: std::string
    parameters:
      - name: command
        type: std::string
        default_argument: ""
    body: |
      Blast::ShellCommandExecutorWithCallback executor(command);
      return executor.execute();
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback
function_body_symbol_dependencies:
  - StringSplitter
  - StringTrimmer
  - std::stringstream
  - std::cerr
  - std::endl
  - std::vector<std::string>
dependencies:
  - symbol: StringSplitter
    headers: [ 'StringSplitter.hpp' ]
  - symbol: StringTrimmer
    headers: [ 'StringTrimmer.hpp' ]
  - symbol: std::stringstream
    headers: [ 'sstream' ]
  - symbol: std::sort
    headers: [ 'algorithm' ]
  - symbol: std::cerr
    headers: [ 'iostream' ]
  - symbol: std::endl
    headers: [ 'iostream' ]
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ 'Blast/ShellCommandExecutorWithCallback.hpp' ]
  - symbol: std::vector<std::string>
    headers: [ 'vector', 'string' ]
