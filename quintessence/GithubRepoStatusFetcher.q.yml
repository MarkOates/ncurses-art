properties:
  - name: last_captured_output
    type: std::string
  - name: git_status_command
    type: std::string
    init_with: "\"git status -uno\""
    getter: true
  - name: repo_name
    getter: true
    init_with: "\"blast\""
    constructor_arg: true
functions:
  - name: has_untracked_files
    type: bool
    body: throw std::runtime_error("not implemented"); return false;

  - name: has_file_changes
    type: bool
    body: throw std::runtime_error("not implemented"); return false;

  - name: has_new_files
    type: bool
    body: throw std::runtime_error("not implemented"); return false;

  - name: is_the_repo_in_sync_with_remote
    type: bool
    body: |
      poll_status();
      std::string string_to_find = "Your branch is up to date with 'origin/master'";
      return last_captured_output_contains_string(string_to_find);

  - name: is_the_local_repo_ahead
    type: bool
    body: |
      poll_status();
      std::string string_to_find = "Your branch is ahead of 'origin/master' by";
      return last_captured_output_contains_string(string_to_find);

  - name: is_the_local_repo_behind
    type: bool
    body: throw std::runtime_error("not implemented"); return false;

  - name: how_far_behind_is_the_repo
    type: bool
    body: throw std::runtime_error("not implemented"); return false;

  - name: how_ahead_is_the_repo
    type: bool
    body: throw std::runtime_error("not implemented"); return false;

  - name: last_captured_output_contains_string
    type: bool
    parameters:
      - name: string_to_find
        type: std::string
        default_argument: ""
    body: |
      std::size_t found = last_captured_output.find(string_to_find);
      if (found!=std::string::npos) return true;
      return false;

  - name: poll_status
    type: bool
    body: |
      last_captured_output = execute_command(full_command().c_str());
      return true;

  - name: full_command
    type: std::string
    body: |
      std::stringstream result;
      result << "(cd ~/Repos/" << repo_name << " && git status -uno)";
      return result.str();

  - name: execute_command
    type: std::string
    parameters:
      - name: cmd
        type: const char*
        default_argument: ""
    body: |
      // TODO: This should be replaced with Blast::ShellCommandExecutor
      std::array<char, 128> buffer;
      std::string result;
      std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd, "r"), pclose);
      if (!pipe) {
          throw std::runtime_error("popen() failed!");
      }
      while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
          result += buffer.data();
      }
      return result;
function_body_symbol_dependencies:
  - std::stringstream
  - std::cerr
  - std::endl
dependencies:
  - symbol: std::stringstream
    headers: [ 'sstream' ]
  - symbol: std::cerr
    headers: [ 'iostream' ]
  - symbol: std::endl
    headers: [ 'iostream' ]
  - symbol: al_init()
  - symbol: const char*
    headers:
      - cstdio
      - iostream
      - memory
      - stdexcept
      - string
      - array
